from fastapi import FastAPI, HTTPException
from pydantic import BaseModel
from datetime import datetime, timedelta
import jwt

# Constants
JWT_SECRET = "your-secret-key"
JWT_ALGORITHM = "HS256"
ACCESS_TOKEN_EXPIRE_MINUTES = 30

# FastAPI app
app = FastAPI(
    title="JWT Auth API",
    description="Generate and validate JWT tokens",
    version="1.0",
    docs_url="/jwt-docs",         # Swagger UI
    redoc_url="/redoc",           # ReDoc
    openapi_url="/openapi.json"   # OpenAPI schema
)

# Request model
class LoginRequest(BaseModel):
    username: str
    password: str

# Response model
class TokenResponse(BaseModel):
    access_token: str
    token_type: str = "bearer"

@app.post("/token", response_model=TokenResponse, tags=["JWT"])
def generate_token(request: LoginRequest):
    # Replace with real validation
    if request.username != "admin" or request.password != "admin":
        raise HTTPException(status_code=401, detail="Invalid credentials")

    # Create token payload
    expire = datetime.utcnow() + timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)
    payload = {
        "sub": request.username,
        "exp": expire
    }

    access_token = jwt.encode(payload, JWT_SECRET, algorithm=JWT_ALGORITHM)
    return {"access_token": access_token}
