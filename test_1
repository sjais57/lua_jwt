import yaml
import re

# --- Load YAML ---
with open("model_catalog.yaml", "r") as f:
    model_catalog = yaml.safe_load(f)

# --- Example policy content ---
policy_content = """
allowed_models := ["abc", "xyz"]
"""

allowed_model = []

pattern = r'allowed_models\s*:=\s*\[(.*?)\]'
match = re.search(pattern, policy_content)

if match:
    models_str = match.group(1)
    allowed_model_list = [
        m.strip().strip('"').strip("'")
        for m in models_str.split(",") if m.strip()
    ]

    # Get full model info filtered by hpc_model_name
    model_info_map = get_model_info_map(model_catalog, allowed_model_list)

    # Build allowed_model list with all details
    allowed_model = [
        {
            "model": model_name,
            **model_info_map.get(model_name, {})
        }
        for model_name in allowed_model_list
        if model_name in model_info_map
    ]

    print("✅ Allowed models with details:")
    for m in allowed_model:
        print(m)

else:
    print("❌ No allowed_models found in policy_content")


# --- Function without Optional ---
def get_model_info_map(yaml_data, allowed_model_list):
    model_info_map = {}

    for model_type in yaml_data.get('model_type', []):
        model_type_name = model_type.get('name', '')

        for family in model_type.get('model_family', []):
            family_name = family.get('name', '')

            for collection in family.get('model_collection', []):
                collection_name = collection.get('name', '')

                for variant in collection.get('variants', []):
                    variant_name = variant.get('name', '')

                    for config in variant.get('configs', []):
                        hpc_model_name = config.get('hpc_model_name', '')

                        if hpc_model_name in allowed_model_list:
                            model_info_map[hpc_model_name] = {
                                "model_type": model_type_name,
                                "family": family_name,
                                "collection": collection_name,
                                "variant": variant_name,
                                "unique_name": config.get('unique_model_name', ''),
                                "aihpc_name": hpc_model_name,
                                "support_frame": [config.get('supported_framework')] if config.get('supported_framework') else [],
                                "model_category": config.get('model_category', ''),
                                "script_name": config.get('script_name', ''),
                                "tasks": config.get('tasks', ''),
                                "base_model_name": config.get('base_model_name', '')
                            }

    return model_info_map
