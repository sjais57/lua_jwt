def get_model_info(yaml_data, allowed_model_list: Optional[List[str]] = None):
    model_info_list = []

    for model_type in yaml_data.get('model_type', []):
        model_type_name = model_type.get('name', '')

        for family in model_type.get('model_family', []) or []:
            family_name = family.get('name', '')

            for collection in family.get('model_collection', []) or []:
                collection_name = collection.get('name', '')

                for variant in collection.get('variants', []) or []:
                    variant_name = variant.get('name', '')

                    for config in variant.get('configs', []) or []:
                        unique_model_name = config.get('unique_model_name', '')
                        hpc_model_name = config.get('hpc_model_name', '')
                        support_frame = [config.get('supported_framework')] if config.get('supported_framework') else []

                        if allowed_model_list is None or hpc_model_name in allowed_model_list:
                            model_info_list.append({
                                "model": unique_model_name,
                                "model_type": model_type_name,
                                "family": family_name,
                                "collection": collection_name,
                                "variant": variant_name,
                                "unique_name": unique_model_name,
                                "aihpc_name": hpc_model_name,
                                "support_frame": support_frame,
                                "model_category": config.get('model_category', ''),
                                "script_name": config.get('script_name', ''),
                                "tasks": config.get('tasks', ''),
                                "base_model_name": config.get('base_model_name', '')
                            })

    return model_info_list

allowed_model = []

pattern = r'allowed_models\s*:=\s*\[(.*?)\]'
match = re.search(pattern, policy_content)

if match:
    models_str = match.group(1)
    allowed_model_list = [
        m.strip().strip('"').strip("'")
        for m in models_str.split(",")
        if m.strip()
    ]

    # Get full model info where hpc_model_name matches allowed_model_list
    model_info_list = get_model_info(model_catalog, allowed_model_list)

    # Build allowed_model list with all details
    allowed_model = model_info_list

    print("✅ allowed_model with all details:", allowed_model)

else:
    print("❌ No allowed_models found in policy_content")
    allowed_model = []  # explicitly empty if no match
