from fastapi import FastAPI, HTTPException, Request
from fastapi.responses import JSONResponse
from fastapi.openapi.docs import get_swagger_ui_html
from pydantic import BaseModel
from datetime import datetime, timedelta, timezone
import os
import uuid
import jwt
from dotenv import load_dotenv
from auth.file_auth import authenticate_file
from auth.ldap_auth import authenticate_ldap, LDAP_AVAILABLE
from utils.api_key import get_additional_claims

# Load environment variables
load_dotenv()

# Configuration
JWT_SECRET_KEY = os.getenv("JWT_SECRET_KEY", "dev-secret-key")
JWT_ALGORITHM = os.getenv("JWT_ALGORITHM", "HS256")
ACCESS_TOKEN_EXPIRES = timedelta(hours=1)
REFRESH_TOKEN_EXPIRES = timedelta(days=30)
AUTH_METHOD = os.getenv("AUTH_METHOD", "file").lower()

# LDAP fallback
if AUTH_METHOD == "ldap" and not LDAP_AVAILABLE:
    print("⚠️ LDAP requested but not available. Falling back to file authentication.")
    AUTH_METHOD = "file"

# FastAPI app
app = FastAPI(title="JWT Auth API", description="FastAPI-based JWT Token Generator")

# Request model
class TokenRequest(BaseModel):
    username: str
    password: str
    api_key: str | None = None
    secret: str | None = None

# Team ID from groups
def get_team_id_from_user(username, user_data):
    groups = user_data.get("groups", [])
    if "administrators" in groups or "admins" in groups:
        return "admin-team"
    elif "ai-team" in groups:
        return "ai-team"
    elif "ml-team" in groups:
        return "ml-team"
    return "general-users"

@app.post("/token")
async def generate_token(req: TokenRequest):
    # Auth
    if AUTH_METHOD == "ldap":
        authenticated, user_data = authenticate_ldap(req.username, req.password)
    else:
        authenticated, user_data = authenticate_file(req.username, req.password)

    if not authenticated:
        raise HTTPException(status_code=401, detail=user_data.get("error", "Invalid credentials"))

    # User context
    user_context = {
        "user_id": req.username,
        "email": user_data.get("email", ""),
        "groups": user_data.get("groups", []),
        "roles": user_data.get("roles", []),
        "team_id": get_team_id_from_user(req.username, user_data),
    }

    # Claims
    api_key_claims = get_additional_claims(req.api_key, user_context) if req.api_key else get_additional_claims(None, user_context)
    full_claims = {**user_data, **api_key_claims}

    # Remove `groups` before embedding in token
    full_claims.pop("groups", None)

    # Set expiration
    exp_hours = full_claims.pop("exp_hours", 1)
    now = datetime.now(timezone.utc)
    access_payload = {
        "iat": now,
        "nbf": now,
        "jti": str(uuid.uuid4()),
        "exp": now + timedelta(hours=exp_hours),
        "sub": req.username,
        "type": "access",
        "fresh": True,
        **full_claims,
    }

    refresh_payload = {
        "iat": now,
        "nbf": now,
        "jti": str(uuid.uuid4()),
        "exp": now + REFRESH_TOKEN_EXPIRES,
        "sub": req.username,
        "type": "refresh",
        **full_claims,
    }

    secret = req.secret if req.secret else JWT_SECRET_KEY
    access_token = jwt.encode(access_payload, secret, algorithm=JWT_ALGORITHM)
    refresh_token = jwt.encode(refresh_payload, secret, algorithm=JWT_ALGORITHM)

    return JSONResponse(content={
        "access_token": access_token,
        "refresh_token": refresh_token,
        "note": "Custom secret used" if req.secret else "Default secret used"
    })

@app.get("/docs", include_in_schema=False)
async def custom_swagger_ui_html():
    return get_swagger_ui_html(openapi_url="/openapi.json", title="API Docs")


=============================
If not working use below:

import os
from datetime import datetime, timedelta
from typing import Optional, Dict, Any, List, Union
from fastapi import FastAPI, HTTPException, Depends, Request, status, Header
from fastapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm
from fastapi.responses import JSONResponse, HTMLResponse
from fastapi.staticfiles import StaticFiles
from fastapi.openapi.docs import get_swagger_ui_html, get_redoc_html
from pydantic import BaseModel
from jose import JWTError, jwt
from passlib.context import CryptContext
import uuid
import yaml
import glob
import logging
from pathlib import Path
from dotenv import load_dotenv

# Configure logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# Load environment variables
load_dotenv()

# Configuration
SECRET_KEY = os.getenv("JWT_SECRET_KEY", "dev-secret-key")
ALGORITHM = "HS256"
ACCESS_TOKEN_EXPIRE_MINUTES = 60  # 1 hour
REFRESH_TOKEN_EXPIRE_DAYS = 30
AUTH_METHOD = os.getenv("AUTH_METHOD", "file")  # "ldap" or "file"
ALWAYS_USE_BASE_CLAIMS = os.getenv("ALWAYS_USE_BASE_CLAIMS", "true").lower() == "true"
API_KEYS_DIR = os.getenv("API_KEYS_DIR", "config/api_keys")
BASE_API_KEY_FILE = "base.yaml"

# For demonstration - replace with your actual authentication methods
class User(BaseModel):
    username: str
    email: Optional[str] = None
    full_name: Optional[str] = None
    disabled: Optional[bool] = None
    groups: List[str] = []
    roles: List[str] = []

class Token(BaseModel):
    access_token: str
    refresh_token: str
    token_type: str

class TokenData(BaseModel):
    username: Optional[str] = None

class APIKeyCreate(BaseModel):
    owner: str
    provider_permissions: List[str] = ["openai"]
    endpoint_permissions: List[str] = ["/v1/chat/completions", "/v1/embeddings"]
    static_claims: Dict[str, Any] = {
        'models': ['gpt-3.5-turbo'],
        'rate_limit': 20,
        'tier': 'standard',
        'exp_hours': 1
    }
    dynamic_claims: Dict[str, Any] = {}

class APIKeyUpdate(BaseModel):
    owner: Optional[str] = None
    provider_permissions: Optional[List[str]] = None
    endpoint_permissions: Optional[List[str]] = None
    static_claims: Optional[Dict[str, Any]] = None
    dynamic_claims: Optional[Dict[str, Any]] = None

# Mock user database - replace with your actual authentication
fake_users_db = {
    "admin": {
        "username": "admin",
        "full_name": "Admin User",
        "email": "admin@example.com",
        "hashed_password": "$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW",  # secret
        "disabled": False,
        "groups": ["administrators"],
        "roles": ["admin"]
    },
    "user1": {
        "username": "user1",
        "full_name": "Regular User",
        "email": "user1@example.com",
        "hashed_password": "$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW",  # secret
        "disabled": False,
        "groups": ["users"],
        "roles": ["user"]
    }
}

pwd_context = CryptContext(schemes=["bcrypt"], deprecated="auto")
oauth2_scheme = OAuth2PasswordBearer(tokenUrl="token")

app = FastAPI(
    title="JWT Auth API",
    description="API for JWT Authentication with FastAPI",
    version="1.0.0",
    docs_url=None,  # Disable default docs to customize
    redoc_url=None  # Disable default redoc to customize
)

# Mount static files for Swagger/ReDoc
app.mount("/static", StaticFiles(directory="static"), name="static")

# Custom docs endpoints to avoid redirects for curl
@app.get("/docs", include_in_schema=False)
async def custom_swagger_ui_html():
    return get_swagger_ui_html(
        openapi_url="/openapi.json",
        title=app.title + " - Swagger UI",
        swagger_favicon_url="/static/favicon.ico"
    )

@app.get("/redoc", include_in_schema=False)
async def redoc_html():
    return get_redoc_html(
        openapi_url="/openapi.json",
        title=app.title + " - ReDoc",
        redoc_favicon_url="/static/favicon.ico"
    )

# Utility functions
def verify_password(plain_password: str, hashed_password: str):
    return pwd_context.verify(plain_password, hashed_password)

def get_password_hash(password: str):
    return pwd_context.hash(password)

def get_user(db, username: str):
    if username in db:
        user_dict = db[username]
        return User(**user_dict)

def authenticate_user(fake_db, username: str, password: str):
    user = get_user(fake_db, username)
    if not user:
        return False
    if not verify_password(password, user.hashed_password):
        return False
    return user

def create_access_token(data: dict, expires_delta: Optional[timedelta] = None):
    to_encode = data.copy()
    if expires_delta:
        expire = datetime.utcnow() + expires_delta
    else:
        expire = datetime.utcnow() + timedelta(minutes=15)
    to_encode.update({"exp": expire})
    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)
    return encoded_jwt

def create_refresh_token(data: dict, expires_delta: Optional[timedelta] = None):
    to_encode = data.copy()
    if expires_delta:
        expire = datetime.utcnow() + expires_delta
    else:
        expire = datetime.utcnow() + timedelta(days=REFRESH_TOKEN_EXPIRE_DAYS)
    to_encode.update({"exp": expire, "type": "refresh"})
    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)
    return encoded_jwt

def get_team_id_from_user(user: User):
    """Determine the team ID from the user's groups"""
    if "administrators" in user.groups or "admins" in user.groups:
        return "admin-team"
    elif "ai-team" in user.groups:
        return "ai-team"
    elif "ml-team" in user.groups:
        return "ml-team"
    return "general-users"

def get_additional_claims(api_key: Optional[str], user_context: Dict[str, Any]):
    """Mock function to get additional claims from API key"""
    # In a real implementation, you would look up the API key in your database
    # and return the associated claims
    return {
        "team_id": user_context.get("team_id", "default-team"),
        "permissions": ["read", "write"],
        "exp_hours": 1
    }

async def get_current_user(token: str = Depends(oauth2_scheme)):
    credentials_exception = HTTPException(
        status_code=status.HTTP_401_UNAUTHORIZED,
        detail="Could not validate credentials",
        headers={"WWW-Authenticate": "Bearer"},
    )
    try:
        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])
        username: str = payload.get("sub")
        if username is None:
            raise credentials_exception
        token_data = TokenData(username=username)
    except JWTError:
        raise credentials_exception
    
    user = get_user(fake_users_db, username=token_data.username)
    if user is None:
        raise credentials_exception
    return user

async def get_current_active_user(current_user: User = Depends(get_current_user)):
    if current_user.disabled:
        raise HTTPException(status_code=400, detail="Inactive user")
    return current_user

async def get_current_user_optional(authorization: Optional[str] = Header(None)):
    if authorization is None or not authorization.startswith("Bearer "):
        return None
    token = authorization.split(" ")[1]
    try:
        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])
        username: str = payload.get("sub")
        if username is None:
            return None
        return get_user(fake_users_db, username=username)
    except JWTError:
        return None

# Endpoints
@app.get("/", response_class=HTMLResponse)
async def read_root():
    return """
    <html>
        <head>
            <title>JWT Auth API</title>
        </head>
        <body>
            <h1>JWT Auth API</h1>
            <p>Endpoints:</p>
            <ul>
                <li><a href="/docs">Swagger UI</a></li>
                <li><a href="/redoc">ReDoc</a></li>
                <li>POST /token - Get JWT tokens</li>
                <li>POST /refresh - Refresh access token</li>
                <li>POST /decode - Decode a JWT token</li>
                <li>POST /validate - Validate a JWT token</li>
                <li>GET /protected - Protected endpoint</li>
            </ul>
        </body>
    </html>
    """

@app.post("/token", response_model=Token)
async def login_for_access_token(form_data: OAuth2PasswordRequestForm = Depends()):
    user = authenticate_user(fake_users_db, form_data.username, form_data.password)
    if not user:
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail="Incorrect username or password",
            headers={"WWW-Authenticate": "Bearer"},
        )
    
    # Create user context for claims
    user_context = {
        "user_id": user.username,
        "email": user.email,
        "groups": user.groups,
        "roles": user.roles,
        "team_id": get_team_id_from_user(user)
    }
    
    # Get additional claims (mock implementation)
    api_key_claims = get_additional_claims(None, user_context)
    
    # Merge user data with additional claims
    claims = {
        "sub": user.username,
        "email": user.email,
        "full_name": user.full_name,
        "groups": user.groups,
        "roles": user.roles,
        "team_id": user_context["team_id"],
        **api_key_claims
    }
    
    # Get expiration time from claims if available
    expires_delta = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)
    if 'exp_hours' in claims:
        expires_delta = timedelta(hours=claims['exp_hours'])
        claims.pop('exp_hours')
    
    # Create tokens
    access_token = create_access_token(
        data={"sub": user.username, **claims},
        expires_delta=expires_delta
    )
    refresh_token = create_refresh_token(
        data={"sub": user.username, **claims}
    )
    
    return {
        "access_token": access_token,
        "refresh_token": refresh_token,
        "token_type": "bearer"
    }

@app.post("/refresh", response_model=Token)
async def refresh_token(refresh_token: str):
    try:
        payload = jwt.decode(refresh_token, SECRET_KEY, algorithms=[ALGORITHM])
        if payload.get("type") != "refresh":
            raise HTTPException(
                status_code=status.HTTP_401_UNAUTHORIZED,
                detail="Invalid token type"
            )
        
        username: str = payload.get("sub")
        if username is None:
            raise HTTPException(
                status_code=status.HTTP_401_UNAUTHORIZED,
                detail="Invalid token"
            )
        
        # Remove reserved claims
        reserved_claims = ['exp', 'iat', 'nbf', 'jti', 'type', 'fresh']
        additional_claims = {key: value for key, value in payload.items() 
                           if key not in reserved_claims}
        
        # Create new access token
        access_token = create_access_token(
            data={"sub": username, **additional_claims}
        )
        
        return {
            "access_token": access_token,
            "refresh_token": refresh_token,  # Refresh token remains the same
            "token_type": "bearer"
        }
    except JWTError:
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail="Invalid token"
        )

@app.post("/decode")
async def decode_jwt(token: str, skip_verification: bool = False, secret: Optional[str] = None):
    try:
        secret_key = secret if secret else SECRET_KEY
        if skip_verification:
            decoded = jwt.decode(token, options={"verify_signature": False})
            decoded["warning"] = "Token signature verification was skipped!"
            return decoded
        
        decoded = jwt.decode(token, secret_key, algorithms=[ALGORITHM])
        return decoded
    except JWTError as e:
        raise HTTPException(
            status_code=status.HTTP_400_BAD_REQUEST,
            detail=f"Invalid token: {str(e)}"
        )

@app.post("/validate")
async def validate_jwt(token: str):
    try:
        decoded = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])
        expiry = datetime.utcfromtimestamp(decoded['exp']).strftime('%Y-%m-%d %H:%M:%S UTC')
        issue_time = datetime.utcfromtimestamp(decoded['iat']).strftime('%Y-%m-%d %H:%M:%S UTC')
        is_expired = datetime.utcfromtimestamp(decoded['exp']) < datetime.utcnow()
        
        return {
            "valid": True,
            "signature_verified": True,
            "expired": is_expired,
            "expiry_time": expiry,
            "issued_at": issue_time,
            "issuer": decoded.get('iss', 'Not specified'),
            "subject": decoded.get('sub', 'Not specified')
        }
    except JWTError as e:
        error_msg = str(e)
        signature_failed = "signature" in error_msg.lower()
        expired = "expired" in error_msg.lower()
        
        return {
            "valid": False,
            "signature_verified": not signature_failed,
            "expired": expired,
            "error": error_msg
        }

@app.get("/protected")
async def protected_route(current_user: User = Depends(get_current_active_user)):
    return {"message": f"Hello, {current_user.username}! You have access to this protected route."}

@app.post("/sensitive-action")
async def sensitive_action(current_user: User = Depends(get_current_active_user)):
    return {
        "message": "Sensitive action performed successfully",
        "user": current_user.username,
        "action_time": str(datetime.now())
    }

# API Key Management Endpoints
@app.get("/api-keys")
async def get_api_keys(current_user: User = Depends(get_current_active_user)):
    if 'administrators' not in current_user.groups and 'admins' not in current_user.groups:
        raise HTTPException(
            status_code=status.HTTP_403_FORBIDDEN,
            detail="Administrator access required"
        )
    
    if not os.path.exists(API_KEYS_DIR):
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail="API keys directory not found"
        )
    
    api_key_files = glob.glob(os.path.join(API_KEYS_DIR, "*.yaml"))
    api_keys = []
    
    for key_file in api_key_files:
        filename = os.path.basename(key_file)
        if filename != BASE_API_KEY_FILE:
            try:
                with open(key_file, 'r') as f:
                    key_data = yaml.safe_load(f)
                    
                api_keys.append({
                    'filename': filename,
                    'id': key_data.get('id', ''),
                    'owner': key_data.get('owner', ''),
                    'provider_permissions': key_data.get('provider_permissions', []),
                    'endpoint_permissions': key_data.get('endpoint_permissions', []),
                    'static_claims': key_data.get('claims', {}).get('static', {})
                })
            except Exception as e:
                logger.error(f"Error reading API key file {filename}: {str(e)}")
    
    return api_keys

@app.get("/api-keys/{api_key_id}")
async def get_api_key(api_key_id: str, current_user: User = Depends(get_current_active_user)):
    if 'administrators' not in current_user.groups and 'admins' not in current_user.groups:
        raise HTTPException(
            status_code=status.HTTP_403_FORBIDDEN,
            detail="Administrator access required"
        )
    
    api_key_files = glob.glob(os.path.join(API_KEYS_DIR, "*.yaml"))
    
    for key_file in api_key_files:
        try:
            with open(key_file, 'r') as f:
                key_data = yaml.safe_load(f)
                
                if key_data.get('id') == api_key_id:
                    return key_data
        except Exception as e:
            logger.error(f"Error reading API key file {key_file}: {str(e)}")
    
    raise HTTPException(
        status_code=status.HTTP_404_NOT_FOUND,
        detail="API key not found"
    )

@app.post("/api-keys", status_code=status.HTTP_201_CREATED)
async def create_api_key(api_key_data: APIKeyCreate, current_user: User = Depends(get_current_active_user)):
    if 'administrators' not in current_user.groups and 'admins' not in current_user.groups:
        raise HTTPException(
            status_code=status.HTTP_403_FORBIDDEN,
            detail="Administrator access required"
        )
    
    # Generate API key string and ID
    api_key_string = str(uuid.uuid4()).replace('-', '')
    api_key_id = f"api-key-{str(uuid.uuid4())[:8]}"
    
    # Create API key data
    api_key_data_dict = {
        'id': api_key_id,
        'owner': api_key_data.owner,
        'provider_permissions': api_key_data.provider_permissions,
        'endpoint_permissions': api_key_data.endpoint_permissions,
        'claims': {
            'static': api_key_data.static_claims,
            'dynamic': api_key_data.dynamic_claims
        }
    }
    
    # Ensure API keys directory exists
    os.makedirs(API_KEYS_DIR, exist_ok=True)
    
    # Save API key to file
    api_key_file = os.path.join(API_KEYS_DIR, f"{api_key_string}.yaml")
    
    try:
        with open(api_key_file, 'w') as f:
            yaml.dump(api_key_data_dict, f, default_flow_style=False)
    except Exception as e:
        logger.error(f"Error creating API key file: {str(e)}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"Failed to create API key: {str(e)}"
        )
    
    return {
        **api_key_data_dict,
        'api_key': api_key_string
    }

@app.put("/api-keys/{api_key_string}")
async def update_api_key(api_key_string: str, api_key_data: APIKeyUpdate, 
                        current_user: User = Depends(get_current_active_user)):
    if 'administrators' not in current_user.groups and 'admins' not in current_user.groups:
        raise HTTPException(
            status_code=status.HTTP_403_FORBIDDEN,
            detail="Administrator access required"
        )
    
    api_key_file = os.path.join(API_KEYS_DIR, f"{api_key_string}.yaml")
    
    if not os.path.exists(api_key_file):
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail="API key not found"
        )
    
    try:
        with open(api_key_file, 'r') as f:
            existing_data = yaml.safe_load(f)
        
        # Update fields
        updated_data = {
            'id': existing_data['id'],  # Preserve original ID
            'owner': api_key_data.owner if api_key_data.owner is not None else existing_data.get('owner'),
            'provider_permissions': api_key_data.provider_permissions if api_key_data.provider_permissions is not None 
                                  else existing_data.get('provider_permissions', []),
            'endpoint_permissions': api_key_data.endpoint_permissions if api_key_data.endpoint_permissions is not None 
                                   else existing_data.get('endpoint_permissions', []),
            'claims': {
                'static': api_key_data.static_claims if api_key_data.static_claims is not None 
                        else existing_data.get('claims', {}).get('static', {}),
                'dynamic': api_key_data.dynamic_claims if api_key_data.dynamic_claims is not None 
                          else existing_data.get('claims', {}).get('dynamic', {})
            }
        }
        
        with open(api_key_file, 'w') as f:
            yaml.dump(updated_data, f, default_flow_style=False)
        
        return updated_data
    except Exception as e:
        logger.error(f"Error updating API key: {str(e)}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"Failed to update API key: {str(e)}"
        )

@app.delete("/api-keys/{api_key_string}")
async def delete_api_key(api_key_string: str, current_user: User = Depends(get_current_active_user)):
    if 'administrators' not in current_user.groups and 'admins' not in current_user.groups:
        raise HTTPException(
            status_code=status.HTTP_403_FORBIDDEN,
            detail="Administrator access required"
        )
    
    api_key_file = os.path.join(API_KEYS_DIR, f"{api_key_string}.yaml")
    
    if not os.path.exists(api_key_file):
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail="API key not found"
        )
    
    try:
        os.remove(api_key_file)
        return {"message": "API key deleted successfully"}
    except Exception as e:
        logger.error(f"Error deleting API key: {str(e)}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"Failed to delete API key: {str(e)}"
        )

@app.get("/debug/request-info")
async def debug_request_info(request: Request, authorization: Optional[str] = Header(None)):
    """Endpoint for debugging request information"""
    request_info = {
        "headers": dict(request.headers),
        "method": request.method,
        "url": str(request.url),
        "path": request.url.path,
        "query_params": dict(request.query_params),
        "client": request.client.host if request.client else None
    }
    
    jwt_info = {}
    if authorization and authorization.startswith("Bearer "):
        token = authorization.split(" ")[1]
        jwt_info["token"] = token
        
        # Check for custom secret in query parameters
        custom_secret = request.query_params.get("secret")
        if custom_secret:
            jwt_info["using_custom_secret"] = True
        
        # Try to decode the token
        try:
            secret_key = custom_secret if custom_secret else SECRET_KEY
            decoded = jwt.decode(token, secret_key, algorithms=[ALGORITHM])
            jwt_info["decoded"] = decoded
            jwt_info["verified"] = True
        except JWTError as e:
            jwt_info["verification_error"] = str(e)
            jwt_info["verified"] = False
            try:
                decoded = jwt.decode(token, options={"verify_signature": False})
                jwt_info["decoded"] = decoded
                jwt_info["warning"] = "Token signature verification failed! Showing unverified token contents."
            except JWTError as e:
                jwt_info["error"] = f"Failed to decode token: {str(e)}"
    
    return {
        "request_info": request_info,
        "jwt_info": jwt_info if jwt_info else None,
        "timestamp": str(datetime.now())
    }

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=8000)
