from typing import Dict, Any, List

def get_model_map_info(allowed_paths: List[str]) -> List[Dict[str, Any]]:
    catalog = load_model_catalog()
    models: List[Dict[str, Any]] = []

    for path in allowed_paths:
        subtree: Any = catalog
        keys = path.split("#")
        metadata = {}

        for i, key in enumerate(keys):
            if not isinstance(subtree, dict):
                subtree = None
                break
            subtree = subtree.get(key)
            if subtree is None:
                break

            # Collect metadata (we take key names from the path)
            if i % 2 == 1:  # Value node
                level = keys[i - 1]
                metadata[level] = key

        if subtree is None:
            continue

        # Handle configs or direct list
        configs = subtree if isinstance(subtree, list) else subtree.get("configs", [])
        for cfg in configs:
            model_name = cfg.get("unique_model_name", "")
            if not model_name:
                continue

            model_entry = {
                "model": model_name,
                "model_name": model_name,
                **metadata,
                "frameworks": []
            }

            framework_entry = {
                "inference_type": f"{cfg.get('inference_type', '')}_{cfg.get('protocol', '')}",
                "tasks": cfg.get("tasks", ""),
                "script_name": cfg.get("script_name", ""),
                "hpc_model_name": cfg.get("hpc_model_name", "")
            }

            model_entry["frameworks"].append(framework_entry)
            models.append(model_entry)

    return models
