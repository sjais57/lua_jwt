def get_model_map_info(allowed_path: str) -> Dict[str, Any]:
    catalog = load_model_catalog()
    subtree: Any = catalog

    # Safely descend through the path
    for key in allowed_path.split("#"):
        if not isinstance(subtree, dict):
            return {}
        subtree = subtree.get(key)
        if subtree is None:
            return {}

    # If subtree is the configs list directly
    configs = subtree if isinstance(subtree, list) else subtree.get("configs", [])
    
    result: Dict[str, Any] = {}

    for cfg in configs:
        name = cfg.get("unique_model_name")
        if not name:
            continue
        result.setdefault(name, {
            "model_name": name,
            "frameworks": []
        })["frameworks"].append({
            "supported_framework": f"{cfg.get('inference_type', '')}_{cfg.get('protocol', '')}",
            "protocol": cfg.get("protocol", ""),
            "script_name": cfg.get("script_name", ""),
            "hpc_model_name": cfg.get("hpc_model_name", ""),
            "tasks": cfg.get("tasks", ""),
        })

    return result
allowed_model = []

for path in allowed_paths:
    model_map = get_model_map_info(path)
    if model_map:
        for model_name, model_data in model_map.items():
            allowed_model.append({
                "model": model_name,
                **model_data
            })

print(json.dumps(allowed_model, indent=2))
