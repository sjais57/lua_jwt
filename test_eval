import yaml
from group_category import get_user_category
import json

API_KEY_YAML_PATH = "api.yaml"
user_groups = ["grp_tier1", "unix"]

with open(API_KEY_YAML_PATH, "r") as f:
    data = yaml.safe_load(f)

metadata = data.get("metadata", {})
if "opa_policy" in data:
    metadata["opa_policy"] = data["opa_policy"]

result = get_user_category(user_groups, lookup_mode="TIERED_MATCH", metadata=metadata)
print(json.dumps(result, indent=2))


metadata:
  categories:
    gold:
      groups: [grp_tier1, powerusers]
      tier: 3
      destURL: debug/request-info?user_category=gold
    silver:
      groups: [grp_tier2, contributors]
      tier: 2
      destURL: debug/request-info?user_category=silver
opa_policy: |
  package dspai.policy

  default matched_category = null

  matches[c] {
      some name
      cat := input.metadata.categories[name]
      some g
      g := input.user_groups[_]
      g == cat.groups[_]
      c := {
          "name": name,
          "tier": cat.tier,
          "destURL": cat.destURL
      }
  }

  matched_category = best {
      cats := [c | c := matches[_]]
      count(cats) > 0
      best := max(cats, compare)
  }

  compare(a, b) = r {
      r := a.tier > b.tier
  }













import yaml
from group_category import get_user_category

# ---- HARD CODED VALUES FOR TESTING ----

# Path to your api_key.yaml (update as needed)
API_KEY_YAML_PATH = "api.yaml"

# Simulate a user who is in these groups (change to test!)
user_groups = ["grp_tier1", "unix"]

# ---------------------------------------

# 1. Load the YAML
with open(API_KEY_YAML_PATH, "r") as f:
    data = yaml.safe_load(f)

metadata = data.get("metadata", {})
# Also pass embedded OPA policy if present
if "opa_policy" in data:
    metadata["opa_policy"] = data["opa_policy"]

# 2. Evaluate the user's category using OPA
result = get_user_category(user_groups, lookup_mode="TIERED_MATCH", metadata=metadata)

# 3. Print the output
print("Input user_groups:", user_groups)
print("OPA Evaluation Result:")
import json
print(json.dumps(result, indent=2))
