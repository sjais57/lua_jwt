from fastapi import FastAPI, Query
from pydantic import BaseModel
from typing import List, Optional
import yaml

app = FastAPI()

# --- Pydantic model ---
class ModelEntry(BaseModel):
    model: str
    family: str
    version: str
    collection: str
    variant: str
    unique_name: str
    aihpc_name: Optional[str]
    support_frame: List[str]
    inference_types: List[str]
    model_category: Optional[str]
    script_name: Optional[str]
    tasks: Optional[float]

# --- Load YAML ---
with open("model_catalog.yaml", "r") as f:
    model_catalog = yaml.safe_load(f)

# --- Helper function ---
def get_model_info(yaml_data, allowed_model_list: Optional[List[str]] = None):
    model_info_list = []

    for model_type in yaml_data.get('model_type', []):
        model_type_name = model_type.get('name', '')

        for family in model_type.get('model_family', []):
            family_name = family.get('name', '')

            for collection in family.get('model_collection', []):
                collection_name = collection.get('name', '')

                for variant in collection.get('variants', []):
                    variant_name = variant.get('name', '')

                    for config in variant.get('configs', []):
                        unique_model_name = config.get('unique_model_name', '')
                        support_frame = [config.get('supported_framework')] if config.get('supported_framework') else []

                        if allowed_model_list is None or unique_model_name in allowed_model_list:
                            model_info_list.append({
                                "model": unique_model_name,
                                "family": family_name,
                                "version": model_type_name,
                                "collection": collection_name,
                                "variant": variant_name,
                                "unique_name": unique_model_name,
                                "aihpc_name": config.get('hpc_model_name', ''),
                                "support_frame": support_frame,
                                "inference_types": [],  # YAML doesn't define this
                                "model_category": config.get('model_category', ''),
                                "script_name": config.get('script_name', ''),
                                "tasks": config.get('tasks', None)
                            })

    return model_info_list

# --- Endpoint ---
@app.get("/models", response_model=List[ModelEntry])
def get_models(
    family: Optional[str] = Query(None, description="Filter by model family"),
    version: Optional[str] = Query(None, description="Filter by model type / version"),
    collection: Optional[str] = Query(None, description="Filter by model collection"),
    variant: Optional[str] = Query(None, description="Filter by variant"),
    support_frame: Optional[str] = Query(None, description="Filter by support_frame"),
    model_category: Optional[str] = Query(None, description="Filter by model_category")
):
    """
    List models with optional filters.
    """
    flat_models = get_model_info(model_catalog)

    if family:
        flat_models = [m for m in flat_models if m["family"] == family]
    if version:
        flat_models = [m for m in flat_models if m["version"] == version]
    if collection:
        flat_models = [m for m in flat_models if m["collection"] == collection]
    if variant:
        flat_models = [m for m in flat_models if m["variant"] == variant]
    if support_frame:
        flat_models = [m for m in flat_models if support_frame in m["support_frame"]]
    if model_category:
        flat_models = [m for m in flat_models if m["model_category"] == model_category]

    return flat_models
