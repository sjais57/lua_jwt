from fastapi import FastAPI, Query
from pydantic import BaseModel
from typing import List, Optional
import yaml

app = FastAPI()

# --- Example Pydantic model ---
class ModelEntry(BaseModel):
    model: str
    family: str
    version: str
    variant: str
    unique_name: str
    aihpc_name: str
    support_frame: List[str]
    inference_types: List[str]

# --- Assume you load this at startup ---
# For demo, load from file or string
with open("model_catalog.yaml", "r") as f:
    model_catalog = yaml.safe_load(f)

# --- Your function ---
def get_model_info(yaml_data, allowed_model_list: Optional[List[str]] = None):
    model_info_list = []
    for family_name, family_data in yaml_data.get('model_family', {}).items():
        for version_name, version_data in family_data.items():
            for variant_name, variant_data in version_data.items():
                aihpc_name = variant_data.get('aihpc_name')
                if allowed_model_list is None or aihpc_name in allowed_model_list:
                    model_info_list.append({
                        "model": aihpc_name,
                        "family": family_name,
                        "version": version_name,
                        "variant": variant_name,
                        "unique_name": variant_data.get('unique_name'),
                        "aihpc_name": variant_data.get('aihpc_name'),
                        "support_frame": variant_data.get('support_frame', []),
                        "inference_types": variant_data.get('inference_types', [])
                    })
    return model_info_list

# --- The endpoint ---
@app.get("/models", response_model=List[ModelEntry])
def get_models(
    family: Optional[str] = Query(None),
    version: Optional[str] = Query(None),
    support_frame: Optional[str] = Query(None),
    inference_type: Optional[str] = Query(None)
):
    """
    List models (flat, filterable by family/version/support_frame/inference_type).
    """
    # Get all models
    flat_models = get_model_info(model_catalog)

    # Apply filters
    if family:
        flat_models = [m for m in flat_models if m["family"] == family]
    if version:
        flat_models = [m for m in flat_models if m["version"] == version]
    if support_frame:
        flat_models = [m for m in flat_models if support_frame in m["support_frame"]]
    if inference_type:
        flat_models = [m for m in flat_models if inference_type in m["inference_types"]]

    return flat_models
